require( 'lo' );
var async = require( 'async' ),
    Crawler = require('../').CrawlerPool,
    path = require( 'path' ),
    zlib = require( 'zlib' ),
    fs = require( 'fs' ),
    options = {
        timeout     :   60000,
        maxRequests :   40,
        maxRetries  :   3,
        ruleFile    :   path.resolve( './rules.js' ),
        rules       :   'Rules',
        rule        :   'dom.ria.ua'
    }/*,
    uri,
    Diff = require('/usr/local/lib/node_modules/jsondiffpatch/src/jsondiffpatch.js'),
    MDB = require( 'mongoskin'),
    db = MDB.db( 'localhost:27017/autoDiff?auto_reconnect&debug'),
    cC = db.collection( 'crawler')*/;


function autoDiffGZip() {
/*
    var Queue = [],
        start = new Date().getTime(),
        queue = async.queue(function(o, callback) {
            var uri = o.uri;

            Queue.push(new Fisher({
                uri     :   uri
            }, {
                timeout     :   60000,
                maxRequests :   40,
                maxRetries  :   3,
                ruleFile    :   path.resolve( './rules.js' ),
                rules       :   o.id,
                rule        :   'index'
            }, function( v ) {
                cC.findOne({_id:o.id}, function( error, Value ) {
                    if ( error ) return callback();
                    var content;

                    if ( Value ) {
                        zlib.gunzip( new Buffer( Value.current, 'base64'), function( error, value ) {
                            console.fatal( error );

                            try {
                                content = JSON.parse( value );
                            } catch ( error ) {
                                content = Value.current;
                            }

                            var diff = Diff.diff( content, v );

                            if ( !diff ) {
                                console.info( '[ ' + o.id + ' ] ничего не измени-лось' );
                                return callback();
                            }

                            var q = {
                                $set    :   {
                                    current     :   v
                                },
                                $push   :   {
                                    diff    :   {
                                        date    :   new Date(),
                                        data    :   {
                                            patch   :   diff,
                                            current :   v,
                                            last    :  content
                                        }
                                    }
                                }
                            };

                            fs.writeFileSync( 'query.json', JSON.stringify( q ), 'utf-8' );

                            console.debug( 'create gzipped query' );
                            async.parallel({
                                current :   function( callback ) {
                                    zlib.gzip( JSON.stringify( q.$set.current ), callback );
                                },
                                diff    :   function( callback ) {
                                    zlib.gzip( JSON.stringify( q.$push.diff.data ), callback );
                                }
                            }, function( error, result ) {
                                console.debug( 'query gzipped' );
                                console.fatal( error );

                                q.$set.current = result.current.toString( 'base64' );
                                q.$push.diff.data = result.diff.toString( 'base64' );

                                fs.writeFileSync( 'query-gz.json', JSON.stringify( q ), 'utf-8' );

                                db.eval( 'return updatePatch( "' + o.id + '", ' + JSON.stringify( q ) + ' )', function( error, value ) {
                                    console.fatal( value );

                                    console.log( 'updated!!!!!!!' );
                                    callback(  );
                                })
                            });


                        });

                    } else {
                        content = {
                            _id     :   o.id,
                            current :   v,
                            diff    :   []
                        };

                        zlib.gzip( JSON.stringify( content.current ), function( error, value ) {
                            console.fatal( error );
                            content.current = value.toString( 'base64' );

                            cC.save( content, function( e, v ) {
                                console.fatal( e );
                                console.inspect( v && Object.keys( v ) );
                                callback();
                            });
                        })

                    }
                });
            }));
        }, 100);

    queue.drain = function() {
        console.log( 'autoDiff complete! with %s seconds', (new Date().getTime()-start)/1000 );
        setTimeout(function() {
            process.exit(1);
        }, 15000);
    };

    var interval = setInterval(function() {
        var length = 0,
            running = 0,
            tasks = 0,
            started = 0,
            stoped = 0,
            percent = 0;
        Queue.map(function( fisher ) {
            length+= fisher.queue.length();
            running+= fisher.queue.running();
            tasks+= fisher.queue.tasks.length;
            started+= fisher.length;
            stoped+= fisher.stoped;
        });
        percent = ((stoped*100)/started);
        console.debug( '[%d/%d/%d] %d% done', tasks, running, length,
            percent.toString().replace(/(\d+)\.(\d{2}).*//*
, '$1.$2') );

        if ( percent == 100 && !length && !running && !tasks ) clearInterval( interval );

    }, 5000);
*/
    var queue = new Crawler({
        ruleFile    :   __dirname + '/../rules.js'
    }, console.inspect);
//    queue.push({ruleGroup: 'ferrari.com', uri: 'http://www.ferrari.com/English/GT_Sport%20Cars/CurrentRange/Pages/Current_Range.aspx'}, console.inspect);
//    queue.push({ruleGroup: 'mazda.ru', uri: 'http://www.mazda.ru/showroom/'}, console.inspect);
//    queue.push({ruleGroup: 'jeep-russia.ru', uri: 'http://www.jeep-russia.ru/lineup.html'}, console.inspect);
    queue.push({ruleGroup: 'honda.co.ru', uri: 'http://www.honda.co.ru/'}, console.inspect);
//    queue.push({ruleGroup: 'lada-auto.ru', uri: 'http://www.lada-auto.ru/cgi-bin/models.pl'}, console.inspect);
//    queue.push({ruleGroup: 'chery.ru', uri: 'http://www.chery.ru/models'}, console.inspect);
//    queue.push({ruleGroup: 'irito.ru', uri: 'http://www.irito.ru/'}, console.inspect);
//    queue.push({ruleGroup: 'fiat.ru', uri: 'http://fiat.ru/model/'}, console.inspect);
//    queue.push({ruleGroup: 'alpina-cars.ru', uri: 'http://www.alpina-automobiles.com/en/models-alpina.html'}, console.inspect);
//    queue.push({ruleGroup: 'astonmartin.ru', uri: 'http://www.astonmartin.ru/'}, console.inspect);
//    queue.push({ruleGroup: 'bentleyspb.ru', uri: 'http://www.bentleyspb.ru/Current-Models/Current-Model-Overview/'}, console.inspect);
//    queue.push({ruleGroup: 'byd.tagaz.ru', uri: 'http://byd.tagaz.ru/'}, console.inspect);
//    queue.push({ruleGroup: 'dodge.ru', uri: 'http://www.dodge.ru/lineup.html'}, console.inspect);
//    queue.push({ruleGroup: 'chrysler.ru', uri: 'http://www.chrysler.ru/lineup.html'}, console.inspect);
//    queue.push({ruleGroup: 'info.citroen.ru', uri: 'http://info.citroen.ru/price'}, console.inspect);
//    queue.push({ruleGroup: 'uzdaewoo.ru', uri: 'http://www.uzdaewoo.ru/'}, console.inspect);
//    queue.push({ruleGroup: 'ford.ru', uri: 'http://www.ford.ru/Cars'}, console.inspect);
//    queue.push({ruleGroup: 'shop.rusma.ru', uri: 'http://shop.rusma.ru/index.aspx?view=model&group=170'}, console.inspect);
//    queue.push({ruleGroup: 'geely-motors.com', uri: 'http://geely-motors.com'}, console.inspect);
//    queue.push({ruleGroup: 'haima.ru', uri: 'http://www.haima.ru/customer/cars/'}, console.inspect);
//    queue.push({ruleGroup: 'kia.ru', uri: 'http://www.kia.ru/'}, console.inspect);
//    queue.push({ruleGroup: 'lifan-car.ru', uri: 'http://lifan-car.ru/Automobiles.asp'}, console.inspect);
//    queue.push({ruleGroup: 'lotuscars.ru', uri: 'http://lotuscars.ru/models'}, console.inspect);
//    queue.push({ruleGroup: 'maybach-manufaktur.ru', uri: 'http://www.maybach-manufaktur.ru/'}, console.inspect);
//    queue.push({id: 'mercedes-benz.ru', uri: ''});
//    queue.push({id: '', uri: ''});

};

function parseYandex() {
    var rules = require('../rules.js')['auto.yandex.ru'];
    new Fisher({
        uri     :   'http://auto.yandex.ru'
    }, {
        timeout     :   60000,
        maxRequests :   40,
        maxRetries  :   3,
        ruleFile    :   path.resolve( './rules.js' ),
        rules       :   'auto.yandex.ru',
        rule        :   'index'
    }, rules._Callback);
}

//parseYandex();
autoDiffGZip();